import sys


def get_score(text):
    """ compute a score for the given piece of text, that indicates the likelihood of it being a valid english sentence """
    lcase = 'abcdefghijklmnopqrstuvwxyz'
    ucase = lcase.upper()
    wspaces = " ,."
    charset = lcase + ucase + wspaces
    score = 0
    for ch in text:
        if ch in charset:
            score = score + 1
    score = score * 1.0 / len(text)
    return score


def break_otp(filename):
    """ break one-time pad by exploiting key re-use and guessing/statistical analysis of grammatically correct english sentences"""
    # read each line of ciphertext
    with open(filename, "r") as file:
        cipher_lines = file.read().strip('\n').split('\n')
    
    # identify the length of the smallest ciphertext
    min_len = 10000000000
    num_ciphers = len(cipher_lines)
    
    for i in range(num_ciphers):
        cipher_lines[i] = cipher_lines[i].decode('hex')
        if min_len > len(cipher_lines[i]):
            min_len = len(cipher_lines[i])
        
       
    cipher_key = ''
    print min_len
    # break repeating key xor, by brute-forcing each byte of the key and evaluating the score of each column of plaintext
    for i in range(min_len):
        table = {}
        # brute-force key byte for each column of ciphertext
        for key in range(256):
            pt = ''
            for j in range(num_ciphers):
                pt = pt + chr( ( ord(cipher_lines[j][i]) ^ key ) & 0xFF )
            # compute a score for each possible plaintext
            table[pt] = get_score(pt)
        # print the best plaintext obtained so far
        sorted_keys = sorted(table, key=table.get, reverse=True)
        for k in sorted_keys:
            if table[k] > 0.9:
                print k, table[k]
        # this is used to manually examine the available options and construct the respective column based on
        # the most appropriate string. Once we guess a few columns, the rest become obvious.
        raw_input()


# Answer:
# I am planning a secret mission.
# he is the only person to trust.
# the current plan is top secret.
# when should we meet to do this?
# I think they should follow him.
# this is purer than that one is.
# not one cadet is better than I.    

if __name__ == "__main__":
    argc = len(sys.argv)
    if argc != 2:
        print "usage:%s filename" % (sys.argv[0])
        exit(0)
    break_otp(sys.argv[1])